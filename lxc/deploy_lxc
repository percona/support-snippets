#!/bin/bash
# Dispay script usage details
usage () {
  echo "Usage: [ options ]"
  echo "Options:"
  echo "--flavor=[ps|mysql]				Which flavor of mysql to install"
  echo "--type=[pxc|proxysql|proxysql-pxc|"
  echo "          standalone|replication|"
  echo "          proxysql-replication]                 Type of machine to deploy, currently support pxc, proxysql, proxysql-pxc, standalone, replication, proxysql-replication"
  echo "--name=						Identifier of this machine, such as #Issue Number. Machines are identified by [user.name]-[issue_nr]-[type]-[id]"
  echo "						such as marcelo.altmann-123456-pxc-1"
  echo "--enter						If type={standalone}, it will enter the created node"
  echo "--enter-node=N					If type={pxc,replication}, it will enter node number N"
  echo "--proxysql-nodes=N				Number of ProxySQL nodes"
  echo "--proxysql-pxc-node=				Container name of one PXC node"
  echo "--number-of-nodes=N				Number of nodes when running with type=[pxc|replication|standalone]"
  echo "--show-versions=MAJOR_RELEASE			Used in combination with --type, this option shows the available versions to be installed"
  echo "                                                Example --type=standalone --show-versions=5.7"
  echo "--version=FULL_VERSION				Full version you want to install, for example Percona-Server-server-57-5.7.21-20.1.el7.x86_64"
  echo "--proxysql-version=[2.0|1.4]			Which proxysql version to install"
  echo "--list						List all containers from your user"
  echo "--use=NAME                                      Connect into a specific container name"
  echo "--start=NAME                                    Start a specific container name"
  echo "--stop=NAME                                     Stop a specific container name"
  echo "--stop-all                                      Stop all containers from running user"
  echo "--destroy=NAME                                  Destroy a specific container name"
  echo "--destroy-all					Destroy all containers from running user"
  echo "--with-rr=PATH_TO_RR_BINARY			Run mysqld under rr (record and replay) - Currently only supported with pxc"
  echo "--help						Print usage"
}

# Check if we have a functional getopt(1)
if ! getopt --test
  then
  go_out="$(getopt --options=edv --longoptions=flavor:,type:,number-of-nodes:,name:,enter,enter-node:,proxysql-nodes:,proxysql-pxc-node:,show-versions:,version:,proxysql-version:,with-rr:,use:,start:,stop:,destroy:,stop-all,destroy-all,list,help --name="$(realpath "$0")" -- "$@")"
  test $? -eq 0 || exit 1
  eval set -- "$go_out"
fi

if [[ $go_out == " --" ]];then
  usage
  exit 1
fi

for arg
do
  case "$arg" in
    -- ) shift; break;;
    --flavor )
      FLAVOR="$2"
      shift 2
      if [ "$FLAVOR" != "ps" ] &&
         [ "$FLAVOR" != "mysql" ]; then
        echo "ERROR: Invalid --flavor passed"
        exit 1
      fi
    ;;
    --type )
      TYPE="$2"
      shift 2
      if [ "$TYPE" != "pxc" ] && 
         [ "$TYPE" != "proxysql" ] && 
         [ "$TYPE" != "proxysql-pxc" ] &&
         [ "$TYPE" != "replication" ] &&
         [ "$TYPE" != "proxysql-replication" ] &&
         [ "$TYPE" != "standalone" ]; then
        echo "ERROR: Invalid --type passed" 
	echo " Curently only supported types: pxc, proxysql, proxysql-pxc, standalone, replication and proxysql-replication"
        exit 1
      fi
    ;;
    --name )
    NAME="$2"
    shift 2
    ;;
    --enter )
    ENTER_NODE_NUMBER='1'
    shift
    ;;
    --enter-node )
    ENTER_NODE_NUMBER="$2"
    shift 2
    ;;
    --number-of-nodes )
    NUMBER_OF_NODES="$2"
    shift 2
    ;;
    --proxysql-nodes )
    PROXY_NUMBER_OF_NODES="$2"
    shift 2
    ;;
    --proxysql-pxc-node )
    PROXY_PXC_NODE="$2"
    shift 2
    ;;
    --use )
    TYPE='use'
    CNAME=$2
    shift 2
    ;;
    --start )
    TYPE='start'
    CNAME=$2
    shift 2
    ;;
    --stop )
    TYPE='stop'
    CNAME=$2
    shift 2
    ;;
    --destroy )
    TYPE='destroy'
    CNAME=$2
    shift 2
    ;;
    --stop-all )
    TYPE='stop-all'
    shift
    ;;
    --destroy-all )
    TYPE='destroy-all'
    shift
    ;;
    --list )
    TYPE='list'
    shift
    ;;
    --show-versions )
    SHOW_VERSIONS=$2
    shift 2
    ;;
    --version)
    VERSION=$2
    shift 2
    ;;
    --proxysql-version)
    PROXYSQL_VERSION=$2
    shift 2
    if [ "$PROXYSQL_VERSION" != "1.4" ] &&
        [ "$PROXYSQL_VERSION" != "2.0" ]; then
       echo "ERROR: Invalid --proxysql-version passed"
       echo " Curently only supported versios are 1.4 and 2.0"
       exit 1
     fi
    ;;
    --with-rr)
    WITH_RR=$2
    shift 2
    ;;
    --help )
    usage
    exit 0
    ;;
  esac
done

#some standard vars
MY_USER=$(echo $(whoami) | sed 's/\./-/g')
if [ -z "$FLAVOR" ];
then
  FLAVOR="ps"
fi

deploy_proxysql() {
  if [[ -z "$PROXY_NUMBER_OF_NODES" ]] ; then PROXY_NUMBER_OF_NODES=1; fi
  if [[ -z "$PROXYSQL_VERSION" ]]; then PROXYSQL_VERSION="2.0"; fi
  if [[ ! -z "$PROXY_PXC_PREFIX" ]] ; then
    $(dirname "$0")/create_proxysql.sh --name="$MY_USER-$NAME-proxysql" --number-of-nodes=$PROXY_NUMBER_OF_NODES --pxc-prefix="$PROXY_PXC_PREFIX" --version="$PROXYSQL_VERSION"
  elif [[ ! -z "$PROXY_REPLICATION_PREFIX" ]]; then
    $(dirname "$0")/create_proxysql.sh --name="$MY_USER-$NAME-proxysql" --number-of-nodes=$PROXY_NUMBER_OF_NODES --replication-prefix="$PROXY_REPLICATION_PREFIX" --version="$PROXYSQL_VERSION"
  else
    $(dirname "$0")/create_proxysql.sh --name="$MY_USER-$NAME-proxysql" --number-of-nodes=$PROXY_NUMBER_OF_NODES --version="$PROXYSQL_VERSION"
  fi
}

deploy_pxc()
{
  if [[ -z "$NUMBER_OF_NODES" ]] ; then NUMBER_OF_NODES=3; fi
  if [[ ! -z "$WITH_RR" ]] ; then WITH_RR="--with-rr=${WITH_RR}"; else WITH_RR=''; fi
  if [[ -z "$NAME" ]] ; then NAME=""; fi
  M_NAME="$MY_USER-$NAME-pxc"
  echo "starting pxc"
  if [[ ! -z "$VERSION" ]]; then
    $(dirname "$0")/create_pxc.sh --name="$M_NAME" --number-of-nodes=$NUMBER_OF_NODES --version=$VERSION $WITH_RR
  else
    $(dirname "$0")/create_pxc.sh --name="$M_NAME" --number-of-nodes=$NUMBER_OF_NODES $WITH_RR
  fi
}

deploy_standalone()
{
  if [[ -z "$NUMBER_OF_NODES" ]] ; then NUMBER_OF_NODES=1; fi
  if [[ -z "$NAME" ]] ; then NAME=""; fi
  if [[ -z "$M_NAME" ]] ; then M_NAME="$MY_USER-$NAME-standalone"; fi
  echo "starting standalone"
  if [[ ! -z "$VERSION" ]]; then
     $(dirname "$0")/create_standalone.sh --flavor=$FLAVOR --name="$M_NAME" --number-of-nodes=$NUMBER_OF_NODES --version=$VERSION
  else
     $(dirname "$0")/create_standalone.sh --flavor=$FLAVOR --name="$M_NAME" --number-of-nodes=$NUMBER_OF_NODES
  fi
}
deploy_replication()
{
  if [[ -z "$NUMBER_OF_NODES" ]] ; then NUMBER_OF_NODES=2; fi
  if [[ -z "$NAME" ]] ; then NAME=""; fi
  if [[ -z "$M_NAME" ]] ; then M_NAME="$MY_USER-$NAME-replication"; fi

  deploy_standalone
  echo "starting replication"
  $(dirname "$0")/create_replication.sh --flavor=$FLAVOR --name="$M_NAME" --number-of-nodes=$NUMBER_OF_NODES --version=${VERSION}
}

if [ ! -z "$SHOW_VERSIONS" ]; then
  if [ "$FLAVOR" == "mysql" ]; then 
    if [ "$TYPE" == "standalone" ]; then
      curl -s http://repo.mysql.com/yum/mysql-${SHOW_VERSIONS}-community/el/7/x86_64/ | grep 'community-server' | awk -F'HREF=' '{print $2}' | awk -F'"' '{print $2}' | awk -F'.rpm' '{print $1}' | sort -n
    else
      echo "--show-versions with --flavor=mysql is only available with --type=standalone"
      exit 1;
    fi
  elif [ "$FLAVOR" == "ps" ]; then
    if [ "$TYPE" == "standalone" ] || [ "$TYPE" == "replication" ]; then
        if [ "${SHOW_VERSIONS}" = "8.0" ]; then
          curl -s https://repo.percona.com/ps-80/yum/release/7/RPMS/x86_64/ | grep 'server-server' | grep -F 8.0 | awk -F'href=' '{print $2}' | awk -F'"' '{print $2}' | awk -F'.rpm' '{print $1}'
        else # for 5.5 5.6 5.7 
          curl -s https://repo.percona.com/release/7/RPMS/x86_64/ | grep 'Server-server' | grep -F $SHOW_VERSIONS | awk -F'href=' '{print $2}' | awk -F'"' '{print $2}' | awk -F'.rpm' '{print $1}'
        fi
    elif [ "$TYPE" == "pxc" ]; then
      if [ "${SHOW_VERSIONS}" = "8.0" ]; then
        curl -s https://repo.percona.com/pxc-80/yum/release/7/RPMS/x86_64/ | grep 'xtradb-cluster-server-[0-9].[0-9].[0-9]' | awk -F'href=' '{print $2}' | awk -F'"' '{print $2}' | awk -F'.rpm' '{print $1}'
      else
        curl -s https://repo.percona.com/release/7/RPMS/x86_64/ | grep 'XtraDB-Cluster-[0-9][0-9]-[0-9]' | grep $SHOW_VERSIONS | awk -F'href=' '{print $2}' | awk -F'"' '{print $2}' | awk -F'.rpm' '{print $1}'
      fi
    else
      echo "--show-versions is only available with --type=pxc or --type=standalone"
      exit 1;
    fi
  fi
  exit 0
elif [ "$TYPE" == "pxc" ]; then deploy_pxc;
elif [ "$TYPE" == "proxysql" ]; then deploy_proxysql;
elif [ "$TYPE" == "standalone" ]; then deploy_standalone;
elif [ "$TYPE" == "replication" ]; then deploy_replication;
elif [ "$TYPE" == "proxysql-pxc" ]; then
  deploy_pxc
  PROXY_PXC_PREFIX="$MY_USER-$NAME-pxc-"
  deploy_proxysql
elif [ "$TYPE" == "proxysql-replication" ]; then
  deploy_replication
  PROXY_REPLICATION_PREFIX="$MY_USER-$NAME-replication-"
  deploy_proxysql
elif [ "$TYPE" == "use" ]; then
  echo "Connecting to $CNAME"
  lxc exec $CNAME /bin/bash
elif [ "$TYPE" == "start" ]; then
  echo "starting $CNAME"
  lxc start $CNAME
elif [ "$TYPE" == "stop" ]; then
  echo "stoppping $CNAME"
  lxc stop $CNAME
elif [ "$TYPE" == "stop-all" ]; then
  for c_name in $(lxc list -c n | grep $(whoami) | awk '{print $2}');
  do
    echo "stopping $c_name"
    lxc stop $c_name
  done
elif [ "$TYPE" == "destroy" ]; then
  echo "stopping $CNAME"
  lxc stop $CNAME
  echo "destroying $CNAME"
  lxc delete $CNAME
elif [ "$TYPE" == "destroy-all" ]; then
  for c_name in $(lxc list -c n | grep $(whoami) | awk '{print $2}');
  do
    echo "stopping $c_name"
    lxc stop $c_name
    echo "destroying $c_name"
    lxc	delete $c_name
  done
elif [ "$TYPE" == "list" ]; then
  lxc list -c n,s,4,6 $(echo $MY_USER)
fi


if [ "$TYPE" == "standalone" ] && [ "$ENTER_NODE_NUMBER" == "1" ]; then
  M_NAME=${M_NAME}-${ENTER_NODE_NUMBER}
  echo "Entering ${M_NAME}"
  $(dirname "$0")/deploy_lxc --use=${M_NAME}
elif [ "$TYPE" == "pxc" ] || [ "$TYPE" == "replication" ]; then
  if [ ! -z "$ENTER_NODE_NUMBER" ]; then
    M_NAME=${M_NAME}-${ENTER_NODE_NUMBER}
    echo "Entering ${M_NAME}" 
    $(dirname "$0")/deploy_lxc --use=${M_NAME} 
  fi
fi



